Description: CodePipeline

Parameters:
  ProjectSource:
    Type: String
    Default: "https://github.com/adburpitt/idek-rn-bro"
    Description: "Source URL"
  ProjectName:
    Type: String
    Description: "Project Name"
  DomainName:
    Type: String
  CertificateArn:
    Type: String
  Environment:
    Type: String
    Default: ''

  GithubOwner:
    Type: String
    Default: ADBurpitt
    Description: "Github repo owner"
  GithubRepo:
    Type: String
    Default: idek-rn-bro
    Description: "Github repo name"
  GithubOAuthToken:
    Type: String
    Description: "Github access token"
  
  TemplatePrefix:
    Type: String
    Default: "templates"

Conditions:
  isProd: !Equals
    - !Ref Environment
    - ''

Resources:
  StackBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - isProd
        - !Sub ${ProjectName}-Stack-Bucket
        - !Sub ${ProjectName}-${Environment}-Stack-Bucket
      
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - isProd
        - !Sub ${ProjectName}-Frontend-Bucket
        - !Sub ${ProjectName}-${Environment}-Frontend-Bucket
      WebsiteConfiguration:
        IndexDocument: index.html
  
  Distribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: !If
          - isProd
          - !Sub ${ProjectName}-Distribution
          - !Sub ${ProjectName}-${Environment}-Distribution
        Origins:
          - DomainName: !GetAtt FrontendBucket.DomainName
            Id: !Ref FrontendBucket
            S3OriginConfig:
              OriginAccessIdentity: ''
        DefaultRootObject: index.html
        Enabled: true
        DefaultCacheBehavior: 
          MinTTL: 86400
          MaxTTL: 31536000
          ForwardedValues: 
            QueryString: true
          TargetOriginId: !Ref FrontendBucket
          ViewerProtocolPolicy: "redirect-to-https"

  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !If
        - isProd
        - !Sub ${ProjectName}-CodePipelineRole
        - !Sub ${ProjectName}-${Environment}-CodePipelineRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codepipeline.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CodePipelineAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource: !If
                  - isProd
                  - !Sub arn:aws:s3:::${ProjectName}*
                  - !Sub arn:aws:s3:::${ProjectName}-${Environment}*
         
              - Effect: "Allow"
                Action: "cloudformation:*"
                Resource: !If
                  - isProd
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectName}*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectName}-${Environment}*
              
              - Effect: "Allow"
                Action: "codebuild:*"
                Resource:
                  - !GetAtt ApiBuild.Arn
                  - !GetAtt TemplateStoreBuild.Arn
                  - !GetAtt FrontendBuild.Arn
              
              - Effect: "Allow"
                Action: "iam:PassRole"
                Resource: !If
                  - isProd
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-CloudFormationRole
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-${Environment}-CloudFormationRole

  CloudFormationRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !If
        - isProd
        - !Sub ${ProjectName}-CloudFormationRole
        - !Sub ${ProjectName}-${Environment}-CloudFormationRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "cloudformation.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CloudFormationAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource: !If
                  - isProd
                  - !Sub arn:aws:s3:::${ProjectName}*
                  - !Sub arn:aws:s3:::${ProjectName}-${Environment}*
              
              - Effect: "Allow"
                Action: "cloudformation:*"
                Resource: !If
                  - isProd
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectName}*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectName}-${Environment}*
              
              - Effect: "Allow"
                Action: "iam:*"
                Resource: !If
                  - isProd
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${ProjectName}*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-${Environment}*

              - Effect: "Allow"
                Action: "lambda:*"
                Resource: !If
                  - isProd
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}*
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectName}-${Environment}*
                
              - Effect: "Allow"
                Action: "apigateway:*"
                Resource: !If
                  - isProd
                  - !Sub arn:aws:apigateway:${AWS::Region}::${AWS::AccountId}:/${ProjectName}*
                  - !Sub arn:aws:apigateway:${AWS::Region}::${AWS::AccountId}:/${ProjectName}-${Environment}*
                

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !If
        - isProd
        - !Sub ${ProjectName}-CodeBuildRole
        - !Sub ${ProjectName}-${Environment}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CodeBuildAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "cloudformation:*"
                Resource: !If
                  - isProd
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectName}*
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectName}-${Environment}*
              
              - Effect: "Allow"
                Action: "logs:*"
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              
              - Effect: "Allow"
                Action: "s3:*"
                Resource: !If
                  - isProd
                  - !Sub arn:aws:s3:::${ProjectName}*
                  - !Sub arn:aws:s3:::${ProjectName}-${Environment}*
              
              - Effect: "Allow"
                Action: "iam:ListPolicies"
                Resource: "*"
              
              - Effect: Allow
                Action: "cloudfront:CreateInvalidation"
                Resource: !GetAtt Distribution.Arn

  ApiBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !If
        - isProd
        - !Sub ${ProjectName}-ApiBuild
        - !Sub ${ProjectName}-${Environment}-ApiBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: "backend/buildspec.yaml"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/golang:1.10"
        EnvironmentVariables:
          - Name: BUCKET
            Value: !Ref StackBucket
      TimeoutInMinutes: 5

  TemplateStoreBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If
        - isProd
        - !Sub ${ProjectName}-TemplateStoreBuild
        - !Sub ${ProjectName}-${Environment}-TemplateStoreBuild
      Description: Validate and copy CFN templates
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: "aws/buildspec.yaml"
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/nodejs:10.1.0"
        EnvironmentVariables:
          - Name: ENVIRONMENT
            Value: !Ref Environment
          - Name: TEMPLATE_BUCKET
            Value: !Ref StackBucket
          - Name: TEMPLATE_PREFIX
            Value: !Ref TemplatePrefix
          - Name: DOMAIN_NAME
            Value: !Ref DomainName
          - Name: CERTIFICATE_ARN
            Value: !Ref CertificateArn
      TimeoutInMinutes: 5

  FrontendBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !If
        - isProd
        - !Sub ${ProjectName}-FrontendBuild
        - !Sub ${ProjectName}-${Environment}-FrontendBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: "frontend/buildspec.yaml"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/nodejs:10.1.0"
        EnvironmentVariables:
          DeployBucket: !Ref FrontendBucket
          Distribution: !Ref Distribution
      TimeoutInMinutes: 5

  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !If
        - isProd
        - !Sub ${ProjectName}-Pipeline
        - !Sub ${ProjectName}-${Environment}-Pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref StackBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: App
              Configuration:
                Owner: !Ref GithubOwner
                Repo: !Ref GithubRepo
                Branch: !If
                - isProd
                - master
                - !Ref Environment
                OAuthToken: !Ref GithubOAuthToken
              RunOrder: 1
        
        - Name: Build
          Actions:
            - Name: API
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: Templates
              Configuration:
                ProjectName: !Ref ApiBuild
              RunOrder: 1

            - Name: Template-Store
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: Templates
              OutputArtifacts:
                - Name: Stack
              Configuration:
                ProjectName: !Ref TemplateStoreBuild
              RunOrder: 2

        - Name: Deploy
          Actions:
            - Name: Generate-Changeset
              InputArtifacts:
                - Name: Stack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                StackName: !If
                  - isProd
                  - !Sub ${ProjectName}
                  - !Sub ${ProjectName}-${Environment}
                ChangeSetName: !If
                  - isProd
                  - !Sub ${ProjectName}-Changeset
                  - !Sub ${ProjectName}-${Environment}-Changeset
                RoleArn: !GetAtt CloudFormationRole.Arn
                Capabilities: CAPABILITY_IAM
                TemplatePath: Stack::master.yaml
                TemplateConfiguration: Stack::config.json
              RunOrder: 1

            - Name: Execute-Changeset
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !If
                  - isProd
                  - !Sub ${ProjectName}
                  - !Sub ${ProjectName}-${Environment}
                ChangeSetName: !If
                  - isProd
                  - !Sub ${ProjectName}-Changeset
                  - !Sub ${ProjectName}-${Environment}-Changeset
              RunOrder: 2

        - Name: Frontend
          Actions:
            - Name: Build-&-Deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: Frontend
              Configuration:
                ProjectName: !Ref FrontendBuild
              RunOrder: 1
